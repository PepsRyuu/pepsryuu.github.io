function createPrivateStore () {
    var store = new WeakMap();

    return function (inst) {
        var obj = store.get(inst);

        if (!obj) {
            obj = {};
            store.set(inst, obj);
        }
        return obj;
    }; 
}

var _ = createPrivateStore();

function calculateThumbSize () {
    // Thumb size represents how much space there is to scroll through.
    // For example, if there's twice the viewport to view, then thumb size will be half of the track.
    // There's a minimum however so that it's still visible when the scrollSize is large.
    _(this).thumbSize = Math.max(_(this).minThumbSize, Math.round(_(this).viewportSize / _(this).scrollSize * getTrackSize.call(this)));
}

function getTrackSize () {
    // It's the viewport, minus the buttons. 
    return (_(this).viewportSize - _(this).buttonSize * 2);
}

function getMaxThumbPosition () {
    return (getTrackSize.call(this) - _(this).thumbSize);
}

function getMaxScrollPosition () {
    // Take the scrollable height and subtract the current view, that's the max scroll position value.
    return (_(this).scrollSize - _(this).viewportSize);
}

var ScrollbarState = function ScrollbarState () {
    _(this).thumbPosition = 0;
    _(this).thumbSize = 0;
    _(this).scrollPosition = 0;
    _(this).scrollSize = 0;
    _(this).viewportSize = 0;
    _(this).minThumbSize = 17;
    _(this).buttonSize = 0;
};

ScrollbarState.prototype.setViewportSize = function setViewportSize (size) {
    _(this).viewportSize = size;
    calculateThumbSize.call(this);
};

ScrollbarState.prototype.setButtonSize = function setButtonSize (size) {
    _(this).buttonSize = size;
    calculateThumbSize.call(this);
};

ScrollbarState.prototype.setScrollSize = function setScrollSize (size) {
    _(this).scrollSize = size;
    calculateThumbSize.call(this);
};

ScrollbarState.prototype.setThumbPosition = function setThumbPosition (position) {
    _(this).thumbPosition = Math.max(0, Math.min(position, getMaxThumbPosition.call(this)));
    _(this).scrollPosition = _(this).thumbPosition / getMaxThumbPosition.call(this) * getMaxScrollPosition.call(this);
};

ScrollbarState.prototype.setScrollPosition = function setScrollPosition (position) {
    _(this).scrollPosition = Math.max(0, Math.min(position, getMaxScrollPosition.call(this)));
    _(this).thumbPosition = _(this).scrollPosition / getMaxScrollPosition.call(this) * getMaxThumbPosition.call(this);
};

ScrollbarState.prototype.getThumbPosition = function getThumbPosition () {
    return _(this).thumbPosition;
};   

ScrollbarState.prototype.getThumbSize = function getThumbSize () {
    return _(this).thumbSize;
};

ScrollbarState.prototype.getScrollPosition = function getScrollPosition () {
    return _(this).scrollPosition;
};

export default ScrollbarState;
